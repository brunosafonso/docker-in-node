#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'colorize'

IMAGE_NAME = 'zrpaplicacoes/docker-in-node'
LATEST_VERSION = '6.11.2'

VERSIONS = [
  '6.11.0',
  '6.11.2',
  '6.11.0-alpine',
  '6.11.2-alpine'
].freeze

def dockerfile(version)
  "node:#{version}.Dockerfile"
end

def image_with_tag(version)
  "#{IMAGE_NAME}:#{version}"
end

def build(node_version, opts = {})
  puts "Building #{image_with_tag(node_version)} image..."

  build_config = ['docker', 'build', opts[:quiet] ? '-q' : '',
                  '-f', dockerfile(node_version),
                  '-t', image_with_tag(node_version), '.']

  # parse configs into executable format
  system(*(build_config.reject(&:empty?)))

  puts "Successfully built #{image_with_tag(node_version)}".colorize(:green)

  if node_version.eql?(LATEST_VERSION)
    system('docker', 'tag', image_with_tag(node_version), "#{IMAGE_NAME}:latest")
  end
end

# Parse user params
config = {}

OptionParser.new do |opt|
  opt.on('-a', '--all', 'Build all images') { |v| config[:all] = v }
  opt.on('-n', '--node NODE_VERSION', 'Node Version') { |o| config[:node_version] = o }
  opt.on('-q', '--quiet', 'Proxy to docker build quiet') { |v| config[:quiet] = v }
end.parse!

# Build the image
if config[:all]
  puts "WARN - Ignoring provided node version #{config[:node_version]}".colorize(:red) if config[:node_version]
  VERSIONS.each do |node_version|
    build(node_version, config)
    puts "\n" unless node_version == VERSIONS.last
  end
else
  config[:node_version] ||= '6.11.0'
  build(config[:node_version], config)
end
